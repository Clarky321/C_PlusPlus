/*
СТАТИЧЕСКАЯ ТИПИЗАЦИЯ

С++ является статически типизированным языком программирования.
То есть если мы определили для переменной какой-то тип данных, то в последующем мы этот тип изменить не сможем.
Соответственно переменная может получить значения только того типа, который она представляет.
Однако нередко возникает необходимость присвоить переменной значения каких-то других типов.
И в этом случае применяются преобразования типов.

Ряд преобразований компилятор может производить неявно, то есть автоматически. Например:
*/

#include <iostream>

int main()
{
    unsigned int age{25};
    std::cout << "age = " << age << std::endl;
}

/*
Здесь переменная age представляет тип unsigned int и условно хранит возраст.
Эта переменная инициализируется числом 25, а все целочисленные литералы без суффиксов по умолчанию представляют тип int (signed int).
Но компилятор знает как преобразовать значение 25 к типу unsigned int, и каких-то проблем в данном случае не будет.

Но посмотрим на другой пример:
*/

#include <iostream>

int main()
{
    unsigned int age{-25};
    std::cout << "age = " << age << std::endl;
}

/*
Здесь переменной age уже присваивается число -25 - отрицательное, в то время как тип переменной - unsigned int предполагает лишь использование положительных чисел.
И в этом случае мы столкнемся с ошибкой компиляции.
*/