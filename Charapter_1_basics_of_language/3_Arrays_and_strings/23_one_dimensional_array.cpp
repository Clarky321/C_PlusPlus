/*
МАССИВЫ

ОДНОМЕРНЫЙ МАССИВ
*/

/*
Массив представляет набор однотипных данных.
Формальное определение массива выглядит следующим образом:

тип_переменной название_массива [длина_массива]
*/

// После типа переменной идет название массива, а затем в квадратных скобках его размер. Например, определим массив из 4 чисел:

int numbers[4];

// Число элементов массива также можно определять через константу:

const int n = 4;
int numbers[n]; // содержит 4 элемента

/*
Данный массив имеет четыре числа, но все эти числа имеют неопределенное значение.
Чтобы установить значения элементов массива, указываются фигурные скобки (инициализатор),
внутри которых перечисляются значения для элементов массива:
*/

int numbers[4]{}; // {0, 0, 0, 0}

/*
В данном случае фигурные скобки пусты, поэтому все элементы массива получают нулевые значения.
Также мы можем указать конкретные значения для всех элементов массива:
*/

int numbers[4]{1, 2, 3, 4};

/*
В данном случае в памяти выделяется некоторая область из четырех ячеек по 4 байта (размер типа int), где каждая ячейка содержит определенный элемент массива:

---------------------------------------------------------------
|numbers[0]   |   numbers[1]   |   numbers[2]   |   numbers[3]|
---------------------------------------------------------------
|        1    |           2    |          3     |          4  |
---------------------------------------------------------------
*/

/*
Если значений в инициализаторе меньше, чем элементов в массиве, то значения передаются первым элементам, а остальные получают нулевые значения:
*/

int numbers[4]{1, 2}; //  {1, 2, 0, 0}

// Если значений в инициализаторе больше, чем элементов в массиве, то при компиляции возникнет ошибка:

int numbers[4]{1, 2, 3, 4, 5, 6}; // ! Ошибка

#include <iostream>

using namespace std;

int main()
{
    setlocale(LC_ALL, "Rus");

    int arr[4];

    arr[0] = 5;
    arr[1] = 7;
    arr[2] = 10;
    arr[3] = 3333;

    cout << arr[0] << endl;

    return 0;
}