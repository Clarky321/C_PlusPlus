/*
ЦИКЛ FOR
*/

/*
Инициализатор - выполняется один раз при начале выполнения цикла и представляет установку начальных условий,
как правило, это инициализация счетчиков - специальных переменных, которые используются для контроля за циклом.

Условие - представялет условие, при соблюдении которого выполняется цикл. Как правило, в качестве условия используется операция
сравнения, и если она возвращает ненулевое значение (то есть условие истинно), то выполняется тело цикла, а затем выполняется итерация.

Итерация - выполняется после каждого завершения блока цикла и задает изменение параметров цикла.
Обычно здесь происходит увеличение счетчиков цикла.
*/

/*
for (инициализатор; условие; итерация)
{
    // тело цикла
}
*/

#include <iostream>

using namespace std;

int main()
{
    setlocale(LC_ALL, "Rus");

    for (int i = 1; i < 10; i++)
    {
        cout << i << " * " << i << " = " << i * i << endl;
    }

    return 0;
}

/*
Первая часть объявления цикла - int i = 0 - создает и инициализирует счетчик i.
Фактически это то же самое, что и объявление и инициализация переменной.
Счетчик необязательно должен представлять тип int.
Это может быть и другой числовой тип, например, float. И перед выполнением цикла его значение будет равно 1.

Вторая часть - условие, при котором будет выполняться цикл.
В данном случае цикл будет выполняться, пока переменная i не станет равна 10.

И третья часть - увеличение счетчика на единицу. Опять же нам необязательно увеличивать на единицу.
Можно уменьшать: i--. Можно изменять на другое значение: i+=2.

В итоге блок цикла сработает 9 раз, пока переменная i не станет равна 10.

Результат:
1 * 1 = 1
2 * 2 = 4
3 * 3 = 9
4 * 4 = 16
5 * 5 = 25
6 * 6 = 36
7 * 7 = 49
8 * 8 = 64
9 * 9 = 81
*/

/*
Перебор значений в стиле for-each.

Существует также особая форма цикла for, которая предназначена специально для работы с последовательностями значений.
Эта форма имеет следующее формальное определение:

for(тип переменная : последовательность)
{
    инструкции;
}
*/

#include <iostream>

int main()
{
    for (int n : {2, 3, 4, 5})
    {
        std::cout << n << std::endl;
    }
}

/*
Здесь выражение {2, 3, 4, 5} как раз представляет последовательность значений - чисел int.
Цикл перебирает всю эту последовательность и помещает каждое значение в переменную n, значение которой выводится на консоль.
*/

/*
Вложенные циклы for

Можно определять вложенные циклы.
Например, выведем таблицу умножения с помощью вложенного цикла for:
*/

#include <iostream>

int main()
{
    for (int i{1}; i < 10; i++)
    {
        for (int j{1}; j < 10; j++)
        {
            std::cout << i * j << "\t";
        }
        std::cout << std::endl;
    }
}

/*
Результат:
1       2       3       4       5       6       7       8       9
2       4       6       8       10      12      14      16      18
3       6       9       12      15      18      21      24      27
4       8       12      16      20      24      28      32      36
5       10      15      20      25      30      35      40      45
6       12      18      24      30      36      42      48      54
7       14      21      28      35      42      49      56      63
8       16      24      32      40      48      56      64      72
9       18      27      36      45      54      63      72      81
*/

/*
Бесоконечные циклы.

Иногда необходимо, чтобы цикл выполнялся бесконечно.
Например, когда нам надо бесконечно отслеживать изменения каких-то значений или когда мы точно не знаем, сколько итераций циклу предстоит сделать.
Бесконечные циклы находят широкое применение в различных областях, например, в графических программах, играх, сетевых программах и т.д.
Для создания бесконечного цикла можно использовать любой вид циклов, но во всех случаях условие всегда истинно:

// бесконечный цикл for - условие завершения отсутствует
for (;;)
{
}
// бесконечный цикл while - условие всегда равно true
while (true)
{
}
// бесконечный цикл do-while - условие всегда равно true
do
{
}
while (true);
*/