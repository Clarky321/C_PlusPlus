/*
ПРЕОБРАЗОВАНИЕ ТИПОВ

1. Неявное преобразование.

Компилятор автоматически преобразует один ТИП ДАННЫХ в другой при необходимости.
Это происходит, когда выполняются операции со значениями различных типов данных, передаётся аргумент функции,
которая ожидает другой тип данных, или присваивается значение одного ТИПА ДАННЫХ другого ТИПА ДАННЫХ.

bool -> char -> short int -> int ->  unsigned int -> long -> unsigned -> long long -> float -> double -> long double

2. Явное преобразование.

Его выполняет программист вручную, явно объявляя требуемый тип данных перед выражением.
Для этого используются операторы приведения, например, статическое, динамическое, приведение Const или с повтороной интерпретацией.

static_cat<Type>(arg) - Используется для стандартных преобразований типов во время компиляции
dynamic_cast<Type>(arg) - Используется для преобразования типов среды выполнения при полиморфизме и наследовании
const_cast<Type>(arg) - используется для добавления или удаления квалификатора const из переменной
reinterpret_cast<Type>(arg) - Используется для низкоуровневой переинтерпретации битов (например, преобразования указателей).

Каждый из данных операторов применяется для определенного преобразования типов в конкретной ситуации.
*/

#include <iostream>

using namespace std;

int main()
{
    double x = 1.2;

    int sum = static_cast<int>(x + 1);

    cout << sum;
    return 0;
}