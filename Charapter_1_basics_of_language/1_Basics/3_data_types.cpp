/*
ТИПЫ ДАННЫХ В C++

- Числовые
- Символьные
- Логические
*/

/*
ЦЕЛЫЕ ЧИСЛА
///////////////////////////////////////////////////////////////////////////////////////
int 4 byte -   диапазон от -2147483648 до 2147483648 (описывает целые числа)
short 2 byte - диапазон от -32768 до 32768           (описывает короткие целые числа)
long 4 byte -  диапазон от -2147483648 до 2147483648 (описывает длинные целые числа)
long long 8 byte - диапозон от −9223372036854775808 до 9223372036854775807 (описывает длинные целые числа)
*/

#include <iostream>

int main()
{
    signed char num1{-64};
    unsigned char num2{64};
    short num3{-88};
    unsigned short num4{88};
    int num5{-1024};
    unsigned int num6{1024};
    long num7{-2048};
    unsigned long num8{2048};
    long long num9{-4096};
    unsigned long long num10{4096};
    std::cout << "num1 = " << num1 << std::endl;
    std::cout << "num2 = " << num2 << std::endl;
    std::cout << "num3 = " << num3 << std::endl;
    std::cout << "num4 = " << num4 << std::endl;
    std::cout << "num5 = " << num5 << std::endl;
    std::cout << "num6 = " << num6 << std::endl;
    std::cout << "num7 = " << num7 << std::endl;
    std::cout << "num8 = " << num8 << std::endl;
    std::cout << "num9 = " << num9 << std::endl;
    std::cout << "num10 = " << num10 << std::endl;
}

/*
ЧИСЛА С ПЛАВАЮЩЕЙ ТОЧКОЙ
////////////////////////////////////////////////////////////////////////////////////////
float 4 byte - описывает вещественные числа одинарной точности
double 8 byte - описывает вещественные числа двойной точности

Для хранения дробных чисел в C++ применяются числа с плавающей точкой.
*/

double num1{1};  // 1 - целочисленный литерал
double num2{1.}; // 1. - литерал числа с плавающей точкой

/*
СИМВОЛЬНЫЙ ТИП
///////////////////////////////////////////////////////////////////////////////////////
char 1 byte - описывает символы

Переменная типа char хранит числовой код одного символа и занимает один байт.
Стандарт языка С++ не определяет кодировку символов, которая будет использоваться для символов char,
поэтому производители компиляторов могут выбирать любую кодировку, но обычно это ASCII.

В качестве значения переменная типа char может принимать один символ в одинарных кавычках, либо числовой код символа:
*/

#include <iostream>

int main()
{
    char a1{'A'};
    char a2{65};
    std::cout << "a1: " << a1 << std::endl;
    std::cout << "a2: " << a2 << std::endl;
}

/*
ЛОГИЧЕСКИЙ ТИП
///////////////////////////////////////////////////////////////////////////////////////
bool 1 byte - значения - true/false (описывает логические значения)

Значение по умолчанию для переменных этого типа - false.
*/

#include <iostream>

int main()
{
    bool isAlive{true};
    bool isDead{false};
    std::cout << "isAlive: " << isAlive << "\n";
    std::cout << "isDead: " << isDead << "\n";
}

/*
СПЕЦИФИКАТОР auto
///////////////////////////////////////////////////////////////////////////////////////
Иногда бывает трудно определить тип выражения.
В этом случае можно предоставить компилятору самому выводить тип объекта.
И для этого применяется спецификатор auto.
При этом если мы определяем переменную со спецификатором auto,
эта переменная должна быть обязательно инициализирована каким-либо значением:
*/

auto number = 5;      // number имеет тип int
auto sum{1234.56};    // sum имеет тип double
auto distance{267UL}; // distance имеет тип unsigned long

// На основании присвоенного значения компилятор выведет тип переменной.
// Неинициализированные переменные со спецификатором auto не допускаются:

// auto number; - ошибка (невозможно вывести тип "авто" (требуется инициализатор))